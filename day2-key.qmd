---
title: "Day 2 Computational Session"
format: html
editor: visual
execute: 
  warning: false
  message: false
---

## Vectors

```{r}
# Create a vector
dogs <- c("teddy", "khora", "waffle", "banjo", "tallie")

#Check the class
class(dogs)

```

```{r}
cats <- c("creamsicle wolf", 14.2, 3L)
```

```{r}
years <- c(20, 40, 16, 2)
class(years)
typeof(years)

#if you wanted them to be an integer, you need to put an L
```

we can also ask question that are true or false

```{r}
# want to do a conditional check
# is. <<< asks questions "is this THIS"
# as. <<< gives a command "make this THIS"

is.numeric(years)
is.character(years)
```

```{r}
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy feast")

dog_food

dog_food[2]

dog_food["khora"]
```

```{r}
cars <- c("blue", "orange", "white")
cars[1]

i <- seq(1:2)
cars[i]
```

```{r}
# mutability
cars[3] <- "yellow"
cars
```

Matrices

```{r}
fish_size <- matrix(c(12, 14, 18, 20), ncol = 2, nrow = 2, byrow = FALSE)

class(fish_size)
typeof(fish_size)

# Example indexing:
fish_size[1,1]
fish_size[2,1]

# What happens if we create a matrix with different types of data?
fish_type <-  matrix(c(12, "trout", 18, 13L), ncol = 2, nrow = 2, byrow = FALSE)

class(fish_type)

typeof(fish_type)

fish_type

fish_size[2,]
fish_size[,1]
```

# Lists

Reminder: A list combines vectors that can be of different length and type

```{r}
urchins <- list("blue", c(1, 2, 3), c("a cat", "a dog"), 5L)
urchins

## [[]] telling you what element of the list, it pulls out the vector
ex_1 <- urchins[3]
ex_2 <- urchins[[3]]

class(ex_1)
class(ex_2)

```

Make a named list

```{r}
# not a value but gives us a
# three different vectors
tacos <- list(topping = c("onion", "cilantro", "guacamole"),
              filling = c("beans", "meat", "veggies"),
              price = c(6.75, 8.25, 9.50))

tacos

# Index list elements by name, access while they're named
tacos$filling[2]
```

The price of a veggie burrito with guacamole is `q taco$filling`
